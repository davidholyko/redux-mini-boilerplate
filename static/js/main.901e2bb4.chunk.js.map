{"version":3,"sources":["logo.svg","actions/countActions.js","App.js","reducers/countReducer.js","reducers/rootReducer.js","store/store.js","serviceWorker.js","index.js"],"names":["module","exports","COUNT_ACTIONS","COUNT_UP","COUNT_DOWN","COUNT_RESET","COUNT_SUBMIT","App","onHandleChange","event","setState","customAmount","target","value","handleSubmit","preventDefault","submit","props","state","Number","this","count","increment","decrement","reset","className","onClick","onSubmit","type","placeholder","onChange","_","times","index","key","src","logo","alt","React","Component","connect","counter","dispatch","amount","payload","initialState","combineReducers","action","middleWare","thunk","store","createStore","rootReducer","applyMiddleware","Boolean","window","location","hostname","match","Application","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,kC,yNCA9BC,EAAgB,CAC3BC,SAAU,WACVC,WAAY,aACZC,YAAa,cACbC,aAAc,gB,iBCIVC,G,wBACJ,aAAe,IAAD,8BACZ,+CAIFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,aAAcF,EAAMG,OAAOC,SAN/B,EASdC,aAAe,SAAAL,GACbA,EAAMM,iBADgB,IAEdC,EAAW,EAAKC,MAAhBD,OACcH,EAAU,EAAKK,MAA7BP,aAEJQ,OAAON,GAAS,GAClBG,EAAOH,GAEP,EAAKH,SAAS,CAAEC,aAAc,MAfhC,EAAKO,MAAQ,CAAEP,aAAc,IAFjB,E,sEAqBJ,IAAD,EACwCS,KAAKH,MAA5CI,EADD,EACCA,MAAOC,EADR,EACQA,UAAWC,EADnB,EACmBA,UAAWC,EAD9B,EAC8BA,MAC7Bb,EAAiBS,KAAKF,MAAtBP,aAER,OACE,yBAAKc,UAAU,OACb,4BAAQA,UAAU,qBAChB,4BAAQA,UAAU,kBAAkBC,QAASJ,GAA7C,aAGA,4BAAQG,UAAU,kBAAkBC,QAASH,GAA7C,eAGA,4BAAQE,UAAU,iBAAiBC,QAASF,GAA5C,UAIF,yBAAKC,UAAU,kBACb,0BAAME,SAAUP,KAAKN,cACnB,2BACEW,UAAU,eACVG,KAAK,SACLf,MAAOF,EACPkB,YAAY,wBACZC,SAAUV,KAAKZ,iBAEjB,2BAAOiB,UAAU,kBAAkBG,KAAK,SAASf,MAAM,aAG3D,yBAAKY,UAAU,kBACZM,IAAEC,MAAMX,GAAO,SAAAY,GAAK,OACnB,yBAAKC,IAAKD,EAAOE,IAAKC,IAAMX,UAAU,WAAWY,IAAI,kB,GArD/CC,IAAMC,YAqFTC,eAxBS,SAAAtB,GAItB,MAAO,CAAEG,MAHWH,EAAZuB,QACApB,UAKiB,SAAAqB,GACzB,MAAO,CACLpB,UAAW,WACToB,EAAS,CAAEd,KAAM1B,EAAcC,YAEjCoB,UAAW,WACTmB,EAAS,CAAEd,KAAM1B,EAAcE,cAEjCoB,MAAO,WACLkB,EAAS,CAAEd,KAAM1B,EAAcG,eAEjCW,OAAQ,SAAA2B,GACND,EAAS,CAAEd,KAAM1B,EAAcI,aAAcsC,QAASD,QAK7CH,CAA6CjC,G,sBC3FtDsC,EAAe,CACnBxB,MAAO,GCAMyB,kBAAgB,CAC7BL,QDEa,WAAgD,IAA/BvB,EAA8B,uDAAtB2B,EAAcE,EAAQ,uCAC5D,OAAQA,EAAOnB,MACb,KAAK1B,EAAcC,SACjB,OAAO,eAAKe,EAAZ,CAAmBG,MAAOH,EAAMG,MAAQ,IAC1C,KAAKnB,EAAcE,WACjB,OAAO,eAAKc,EAAZ,CAAmBG,MAAOH,EAAMG,MAAQ,IAC1C,KAAKnB,EAAcG,YACjB,OAAO,eAAKa,EAAZ,CAAmBG,MAAO,IAC5B,KAAKnB,EAAcI,aACjB,OAAO,eAAKY,EAAZ,CAAmBG,MAAO0B,EAAOH,UACnC,QACE,OAAO1B,MEZP8B,EAAa,CAACC,KAEPC,EAAQC,YACnBC,EAJmB,GAMnBC,IAAe,WAAf,EAAmBL,ICEDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCVAC,EACJ,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,EAAD,OAIJU,IAASC,OAAOF,EAAaG,SAASC,eAAe,SDqH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.901e2bb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const COUNT_ACTIONS = {\n  COUNT_UP: 'COUNT_UP',\n  COUNT_DOWN: 'COUNT_DOWN',\n  COUNT_RESET: 'COUNT_RESET',\n  COUNT_SUBMIT: 'COUNT_SUBMIT',\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport { connect } from 'react-redux';\nimport { COUNT_ACTIONS } from './actions/actions';\nimport _ from 'lodash';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { customAmount: '' };\n  }\n\n  onHandleChange = event => {\n    this.setState({ customAmount: event.target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { submit } = this.props;\n    const { customAmount: value } = this.state;\n\n    if (Number(value) < 10) {\n      submit(value);\n    } else {\n      this.setState({ customAmount: '' });\n    }\n  };\n\n  render() {\n    const { count, increment, decrement, reset } = this.props;\n    const { customAmount } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"buttons-container\">\n          <button className=\"btn btn-success\" onClick={increment}>\n            Count up!\n          </button>\n          <button className=\"btn btn-warning\" onClick={decrement}>\n            Count down!\n          </button>\n          <button className=\"btn btn-danger\" onClick={reset}>\n            Reset\n          </button>\n        </header>\n        <div className=\"form-container\">\n          <form onSubmit={this.handleSubmit}>\n            <input\n              className=\"form-control\"\n              type=\"number\"\n              value={customAmount}\n              placeholder=\"Enter a custom amount\"\n              onChange={this.onHandleChange}\n            />\n            <input className=\"btn btn-primary\" type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n        <div className=\"logo-container\">\n          {_.times(count, index => (\n            <img key={index} src={logo} className=\"App-logo\" alt=\"logo\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { counter } = state;\n  const { count } = counter;\n\n  return { count };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    increment: () => {\n      dispatch({ type: COUNT_ACTIONS.COUNT_UP });\n    },\n    decrement: () => {\n      dispatch({ type: COUNT_ACTIONS.COUNT_DOWN });\n    },\n    reset: () => {\n      dispatch({ type: COUNT_ACTIONS.COUNT_RESET });\n    },\n    submit: amount => {\n      dispatch({ type: COUNT_ACTIONS.COUNT_SUBMIT, payload: amount });\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { COUNT_ACTIONS } from '../actions/actions';\n\nconst initialState = {\n  count: 1,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case COUNT_ACTIONS.COUNT_UP:\n      return { ...state, count: state.count + 1 };\n    case COUNT_ACTIONS.COUNT_DOWN:\n      return { ...state, count: state.count - 1 };\n    case COUNT_ACTIONS.COUNT_RESET:\n      return { ...state, count: 1 };\n    case COUNT_ACTIONS.COUNT_SUBMIT:\n      return { ...state, count: action.payload };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport counter from './countReducer';\n\nexport default combineReducers({\n  counter,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootReducer';\n\nconst initialState = {};\nconst middleWare = [thunk];\n\nexport const store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(...middleWare),\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store/store';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst Application = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(Application, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}